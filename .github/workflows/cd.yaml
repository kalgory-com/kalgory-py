name: Publish Python Package

on:
  release:
    types: [published]
  push:
    paths:
      - .github/workflows/cd.yaml
  pull_request:
    branches: ["main"]

jobs:
  release-publish:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install build
          python3 -m pip install twine


      # Step 4: Build the package
      - name: Build the package
        run: python3 -m build

      # Step 5: Publish the package to PyPI
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python3 -m twine upload dist/*
  
  patch:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install build
          python3 -m pip install twine


      # Step 4: Build the package
      - name: Build the package
        run: python3 -m build

      # Step 5: Publish the package to PyPI test
      - name: Publish to PyPITEST
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPITEST_API_TOKEN }}
        run: python3 -m twine upload --repository testpypi dist/*

